/* 
 * File:   main.cpp
 * Author:  Mario Victorino
 * Created on:  July 22, 2024, 2:00 PM
 * Purpose:  Binary Search
 */

//System Libraries
#include <iostream>  //Input/Output Library
#include <cstdlib>   //Random Functions
#include <ctime>     //Time Library
using namespace std;

//User Libraries

//Global Constants, no Global Variables are allowed
//Math/Physics/Conversions/Higher Dimensions - i.e. PI, e, etc...

//Function Prototypes
void fillAry(int [],int);
void prntAry(int [],int,int);
void selSrt(int [],int);
bool binSrch(int [],int,int,int&);
void swap3(int *a,int *b);

//Execution Begins Here!
int main(int argc, char** argv) {
    //Set the random number seed
    srand(static_cast<unsigned int>(time(0)));
    
    //Declare Variables
    const int SIZE=100;
    int array[SIZE];
    int indx,val;
    
    //Initialize or input i.e. set variable values
    fillAry(array,SIZE);

    //Sorted List
    selSrt(array,SIZE);
    
    //Display the outputs
    prntAry(array,SIZE,10);
    cout << endl;
    cout<<"Input the value to find in the array"<<endl;
    cin>>val;
    if(binSrch(array,SIZE,val,indx))
        cout<<val<<" was found at indx = "<<indx<<endl;

    //Exit stage right or left!
    return 0;
}

void fillAry(int array[],int SIZE){
    for(int i=0;i<SIZE;i++){
        cin >> array[i];
    }
}

void prntAry(int array[], int SIZE, int x){
    for(int i=0;i<SIZE;i++){
        cout<<array[i]<<" ";
        if(i%x==(x-1)){
            cout<<endl;
        }
    }
}

void selSrt(int array[],int SIZE){
    for(int pos=0;pos<SIZE-1;pos++){
        int selIndx;
        selIndx=pos;
        for(int i=pos+1;i<SIZE;i++){
            if(*(array+selIndx)>*(array+i)){
                selIndx=i;
            }
        }
        swap3(array+selIndx,array+pos);
    }
}

void swap3(int *array,int *b){
    int temp=*array;
    *array=*b;
    *b=temp;
}

bool binSrch(int array[], int SIZE, int val, int &indx){
    int high=SIZE-1;
    int low=0;
    do{
        int middle=(high+low)/2;
        if(val==array[middle]){
            indx = middle;
            return indx;
        }else if(val<array[middle]){
            high=middle-1;
        }else{
            low=middle+1;
        }
    }while(low<=high);
    return -1;
}
